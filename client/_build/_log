### Starting build.
# Target: ct_wget.ml.depends, tags: { extension:ml, file:ct_wget.ml, ocaml, ocamldep, package(lwt.unix,lwt,tls,tls.lwt,x509,lwt.syntax), quiet, syntax(camlp4o) }
ocamlfind ocamldep -syntax camlp4o -package lwt.unix,lwt,tls,tls.lwt,x509,lwt.syntax -modules ct_wget.ml > ct_wget.ml.depends
# Target: ct_wget.cmo, tags: { byte, compile, extension:cmo, extension:ml, file:ct_wget.cmo, file:ct_wget.ml, implem, ocaml, package(lwt.unix,lwt,tls,tls.lwt,x509,lwt.syntax), quiet, syntax(camlp4o) }
ocamlfind ocamlc -c -syntax camlp4o -package lwt.unix,lwt,tls,tls.lwt,x509,lwt.syntax -o ct_wget.cmo ct_wget.ml
# Target: ct_wget.cmx, tags: { compile, extension:cmx, extension:ml, file:ct_wget.cmx, file:ct_wget.ml, implem, native, ocaml, package(lwt.unix,lwt,tls,tls.lwt,x509,lwt.syntax), quiet, syntax(camlp4o) }
ocamlfind ocamlopt -c -syntax camlp4o -package lwt.unix,lwt,tls,tls.lwt,x509,lwt.syntax -o ct_wget.cmx ct_wget.ml
# Target: ct_wget.native, tags: { dont_link_with, extension:native, file:ct_wget.native, link, native, ocaml, package(lwt.unix,lwt,tls,tls.lwt,x509,lwt.syntax), program, quiet, syntax(camlp4o) }
ocamlfind ocamlopt -linkpkg -syntax camlp4o -package lwt.unix,lwt,tls,tls.lwt,x509,lwt.syntax ct_wget.cmx -o ct_wget.native
# Compilation successful.
